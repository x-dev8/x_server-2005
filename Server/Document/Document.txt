1.说明
    a.每个项目代码按功能模块划分相对应的视图文件夹，试图文件夹下再分为物理文件夹（Common:Client与Server,Server与Server共用 SSCommon:Server与Server共用）
      来保证代码的编写的思维清晰，尽量做到(不同项目中，Client与Server之间，Server与Server)模块可复用，层次清楚。
    b.


===================================改进计划====================================
1.GateServer的平行通讯
2.GameServer 物理机器是使用8核的机器如果开了超线程会有16个处理单元。一个GameServer可以
  使用多线程跑逻辑。所有的逻辑单位为场景，所有的角色管理不是全局，都是依附在
  场景的单位上，锁只在场景变更的时候。
3.工程视图文件夹模块化后持续指导 代码的解耦合，代码命名规范，文件名命名规范
4.GameServer到DatabaseServer的人物属性数据可以优化
5.GameCharId 的扩充
6.Ai的状态化的整理 Npc Monster

================================CenterServer====================================
CenterServer类似于lobby
Gameserver类似于大房间即分类
CenterServer存在以下线程
1.Console主线程 * 1
2.CenterServer主逻辑线程 * 1
3.网络线程，默认为CPU核数 * 2+1
4.Sql数据层线程 * 1

///////////////////////////////////////
// 修改
1. 修改仇恨系统 算法 容器
2. 修改商店买物品提示, 不要发送字符串
3. SkillBag 类 修改
4. 队伍类逻辑重构( 换成vector保存 )
5. RelationConfig中去除队伍中的信息
6. 怪物掉落规则重新规划
7. 邮件流程要改一下
8. 场景类重新整理
10. 状态的是否有害, 修改成是否类型, 是否可以给自己加, 给别人加, 只给自己加, 只给别人加等..


//////////////////log4cxx 消息类型///////////////
ALERT  = 100,
CRIT   = 200,
ERROR  = 300, 
WARN   = 400,
NOTICE = 500,
INFO   = 600,
DEBUG  = 700,
NOTSET = 800

CenterServer类似于lobby
Gameserver类似于大房间即分类

CenterServer存在以下线程
1.Console主线程 * 1
2.CenterServer主逻辑线程 * 1
3.网络线程，默认为CPU核数 * 2+1
4.Sql数据层线程 * 1

如有代码不能及时的修改可以分为
ToDo     稍后修改 一定要改的
ToCheck  有协作人员确认 然后修改
ToNotify 提示 可以有空做优化性修改
定期搜这些关键词

/////////////////64位转化////////////////////////
时间数据类型
ItemDetail中的字符串指针( 要删除字符串指针 )
底层指针作为Key的算法

需要修改类型的地方的关键字
//Warning0 修改统一类型